/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2016 Tiago Lopes
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


package appscanstdrintegration.appscanstandard.utilities;

import java.io.IOException;

import org.jfree.util.Log;

import hudson.FilePath;

public class AppScanStandardScanTemplateBuilder {
	private final String user;
	private final String password;
	private FilePath tempFile;

	public AppScanStandardScanTemplateBuilder(String user, String password) {
		this.user = user;
		this.password = password;
	}

	public void createScanTemplate(FilePath ws)  {

		/**
		 * Basic scan template generated by AppScan Standard
		 * Tweaked to provide an username and password for
		 * authenticated scanning This sets AppScan Standard to
		 * use "Automatic Login Method"
		 *
		 */
		String scanTemplateContent = "<ScanConfiguration Version=\"9.0\"> " + "<UserInput>"
				+ "<FormFiller Version=\"2.0\" Enabled=\"True\" DefaultValue=\"1234\" UseDefaultValue=\"True\">"
				+ " <Group LogicalName=\"InternalAppScanUserName\" MatchType=\"Partial\" Action=\"\">"
				+ "<Name>InternalAppScanUserName</Name>" + "<Value>" + user + "</Value>"
				+ "<MatchNames>" + "	  <MatchName>user</MatchName>"
				+ "	  <MatchName>name</MatchName>"
				+ "	  <MatchName>id</MatchName>"
				+ "	  <MatchName>login</MatchName>"
				+ "	  <MatchName>logon</MatchName>"
				+ "	  <MatchName>signin</MatchName>"
				+ "	  <MatchName>signon</MatchName>"
				+ "	  <MatchName>usr</MatchName>"
				+ "	  <MatchName>member</MatchName>"
				+ "	</MatchNames>" + "</Group>"
				+ "<Group LogicalName=\"InternalAppScanPassword\" MatchType=\"Partial\" Action=\"\">"
				+ "	<Name>InternalAppScanPassword</Name>"
				+ "	<Value Encrypt=\"false\">" + password + "</Value>"
				/* By setting Encrypt to false, the password is written in clear-text, */
				/* setting it to true will not work as it would still be written clear-text but AppScan would try decrypting it and fail to login.*/
				/* For this option to work, one would need to figure out AppScan Standard's encryption algorithm and manually apply it to the given password. */
				+ "	<MatchNames>" + "	  <MatchName>pass</MatchName>"
				+ "	  <MatchName>word</MatchName>"
				+ "	  <MatchName>pswd</MatchName>"
				+ "	  <MatchName>pwd</MatchName>"
				+ "	  <MatchName>auth</MatchName>" + "	</MatchNames>"
				+ "  </Group>" + "	</FormFiller>" + "</UserInput>"
				+ "<SessionManagement Version=\"1.2\">"
				+ "<SessionManagementMode>Automatic</SessionManagementMode>"
				+ "<SessionVerifier>" + "  <Enable>True</Enable>"
				+ "  <OutSession>False</OutSession>" + "  <Pattern />"
				+ " <PatternType>RegularExpression</PatternType>" + "</SessionVerifier>"
				+ "</SessionManagement>" + "</ScanConfiguration>";

		/**
		 *
		 * A new scan template is created containing the
		 * credentials this scan will be passed via command line
		 * by the plugin
		 *
		 */
		// Create a temporary file with our script commands
		try {
			tempFile = ws.createTextTempFile("scan_template_login", ".scant", scanTemplateContent);
		} catch (InterruptedException  | IllegalStateException | IOException e) {
			Log.error("Exception creating temporary scan template for authenticated scan."+e);
		}

	}

	
	public FilePath getTempFile() {
		return tempFile;
	}

	public void setTempFile(FilePath tempFile) {
		this.tempFile = tempFile;
	}
	
	
	public String getScanTemplateFileLocation() {
		return tempFile.getRemote();
	}

	// Delete the temporary file after we use it
	public void deleteScanTemplateFile() throws InterruptedException {
		try {
			tempFile.delete();
		} catch (IOException e) {
			Log.error("Exception deleting temporary scan template for authenticated scan."+e);
		}
	}
}
